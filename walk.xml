<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:sec="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
                           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-2.0.xsd">

  <context:annotation-config />
  
  <bean class="org.opentripplanner.analyst.request.SampleFactory">
    <property name="searchRadiusM" value="200" />
  </bean>
  <bean class="org.opentripplanner.routing.impl.DefaultRemainingWeightHeuristicFactoryImpl"/>
  <bean class="org.opentripplanner.routing.algorithm.GenericAStar"/>
  <!-- bean class="org.opentripplanner.analyst.batch.IndividualFactory" /> -->
  <bean class="org.opentripplanner.analyst.core.GeometryIndex" />
  
  <!-- specify a GraphService, configuring the path to the serialized Graphs -->
  <bean id="graphService" class="org.opentripplanner.routing.impl.GraphServiceImpl">
    <property name="path" value="/home/matthewc/microaccessibility/graphs/ucsb/" />
    <property name="defaultRouterId" value="" />
  </bean>

  <!-- this loads a population from a comma-separated flat text file -->
  <bean id="origins" class="org.opentripplanner.analyst.batch.CSVPopulation">
    <property name="sourceFilename" value="/home/matthewc/microaccessibility/times/data/{infile}" />
    <property name="labelCol" value="2" />
    <property name="inputCol" value="4" />
    <property name="latCol" value="0" />
    <property name="lonCol" value="1" />
    <property name="skipHeaders" value="true" />
  </bean>

  <!-- this creates a population arranged on a regular grid that can later be saved as an image -->
  <bean id="destinations" class="org.opentripplanner.analyst.batch.SyntheticRasterPopulation">
    <property name="left" value="1826044" />
    <property name="right" value="1832203" />
    <property name="top" value="605581" />
    <property name="bottom" value="600198" />        
    <property name="crsCode" value="epsg:26945" /> <!-- California State Plane Zone 5, NAD83, meters -->
    <property name="cols" value="1232" /> <!-- 5 m resolution -->
    <property name="rows" value="1077" />        
  </bean>
  
  
  <bean id="prototypeRoutingRequest" class="org.opentripplanner.routing.core.RoutingRequest">
    <!-- Set default routing parameters here -->
    <property name="maxWalkDistance" value="400000" />
    <property name="clampInitialWait" value="1800" />
    <property name="arriveBy" value="false" />
    <property name="modes" value="WALK" />
  </bean>

  <!-- define the main batch processor, which will build one shortest path tree from each origin to all destinations -->
  <bean id="batchProcessor" class="org.opentripplanner.analyst.batch.BatchProcessor"> 
    <property name="outputPath" value="/home/matthewc/microaccessibility/times/data/{filebase}.tif" />

    <!-- As the street network is not time-dependent (at least not for bikes/peds) this is fine -->
    <property name="date" value="2012-07-12" />
    <property name="time" value="08:00 AM" />
    <property name="timeZone" value="America/Los_Angeles" />
    <property name="nThreads" value="1" />
    <!-- 
         <property name="aggregator"> 
         <bean class="org.opentripplanner.analyst.batch.aggregator.ThresholdSumAggregator">
         <property name="threshold" value="3600" />
         </bean>
         </property> 
    -->

        <property name="accumulator"> 
          <bean class="org.opentripplanner.analyst.batch.ThresholdAccumulator">
            <property name="thresholdMinutes" value="5" />
          </bean>
        </property> 
  </bean>
</beans>